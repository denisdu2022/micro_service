//指定版本

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: person.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SayName_SayHello_FullMethodName = "/pb.SayName/SayHello"
)

// SayNameClient is the client API for SayName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayNameClient interface {
	SayHello(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Teacher, error)
}

type sayNameClient struct {
	cc grpc.ClientConnInterface
}

func NewSayNameClient(cc grpc.ClientConnInterface) SayNameClient {
	return &sayNameClient{cc}
}

func (c *sayNameClient) SayHello(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Teacher, error) {
	out := new(Teacher)
	err := c.cc.Invoke(ctx, SayName_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayNameServer is the server API for SayName service.
// All implementations must embed UnimplementedSayNameServer
// for forward compatibility
type SayNameServer interface {
	SayHello(context.Context, *Teacher) (*Teacher, error)
	mustEmbedUnimplementedSayNameServer()
}

// UnimplementedSayNameServer must be embedded to have forward compatible implementations.
type UnimplementedSayNameServer struct {
}

func (UnimplementedSayNameServer) SayHello(context.Context, *Teacher) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayNameServer) mustEmbedUnimplementedSayNameServer() {}

// UnsafeSayNameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayNameServer will
// result in compilation errors.
type UnsafeSayNameServer interface {
	mustEmbedUnimplementedSayNameServer()
}

func RegisterSayNameServer(s grpc.ServiceRegistrar, srv SayNameServer) {
	s.RegisterService(&SayName_ServiceDesc, srv)
}

func _SayName_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayNameServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayName_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayNameServer).SayHello(ctx, req.(*Teacher))
	}
	return interceptor(ctx, in, info, handler)
}

// SayName_ServiceDesc is the grpc.ServiceDesc for SayName service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayName_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SayName",
	HandlerType: (*SayNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SayName_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person.proto",
}
