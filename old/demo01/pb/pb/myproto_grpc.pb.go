//版本(默认是proto2)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: myproto.proto

//指定所在包包名

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bj38_Say_FullMethodName = "/pb.bj38/Say"
)

// Bj38Client is the client api for Bj38 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Bj38Client interface {
	Say(ctx context.Context, in *People, opts ...grpc.CallOption) (*Student, error)
}

type bj38Client struct {
	cc grpc.ClientConnInterface
}

func NewBj38Client(cc grpc.ClientConnInterface) Bj38Client {
	return &bj38Client{cc}
}

func (c *bj38Client) Say(ctx context.Context, in *People, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, Bj38_Say_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Bj38Server is the server api for Bj38 service.
// All implementations must embed UnimplementedBj38Server
// for forward compatibility
type Bj38Server interface {
	Say(context.Context, *People) (*Student, error)
	mustEmbedUnimplementedBj38Server()
}

// UnimplementedBj38Server must be embedded to have forward compatible implementations.
type UnimplementedBj38Server struct {
}

func (UnimplementedBj38Server) Say(context.Context, *People) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (UnimplementedBj38Server) mustEmbedUnimplementedBj38Server() {}

// UnsafeBj38Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Bj38Server will
// result in compilation errors.
type UnsafeBj38Server interface {
	mustEmbedUnimplementedBj38Server()
}

func RegisterBj38Server(s grpc.ServiceRegistrar, srv Bj38Server) {
	s.RegisterService(&Bj38_ServiceDesc, srv)
}

func _Bj38_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(People)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Bj38Server).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bj38_Say_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Bj38Server).Say(ctx, req.(*People))
	}
	return interceptor(ctx, in, info, handler)
}

// Bj38_ServiceDesc is the grpc.ServiceDesc for Bj38 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bj38_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.bj38",
	HandlerType: (*Bj38Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Bj38_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myproto.proto",
}
